package com.example.challenge.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
            .info(buildApiInformation())           
            .servers(buildServerList())            
            .components(buildSecurityComponents()) 
            .addSecurityItem(buildGlobalSecurity()); 
    }
    
    private Info buildApiInformation() {
        return new Info()
            .title("üéØ Incidents Management API")
            .description(buildRichDescription())
            .version("1.0.0")
            .contact(buildContactInformation())
            .license(buildLicenseInformation());
    }

    private String buildRichDescription() {
        return """
            # üöÄ API Completa de Gest√£o de Ocorr√™ncias (Incidents)
            
            Esta API RESTful fornece um sistema completo para gerenciamento de incidents,
            coment√°rios e usu√°rios, com autentica√ß√£o JWT e recursos avan√ßados de filtragem.
            
            ---
            
            ## üîê **Como Autenticar na API**
            
            A API utiliza **JWT Bearer Token** para autentica√ß√£o. Siga estes passos:
            
            ### üìù **Passo a Passo:**
            1. **Fa√ßa Login**: Execute `POST /api/login` com suas credenciais
            2. **Copie o Token**: Do campo `accessToken` na resposta
            3. **Autorize**: Clique no bot√£o **"Authorize"** üîí no topo desta p√°gina
            4. **Cole o Token**: No formato `Bearer seu-jwt-token-aqui`
            5. **Confirme**: Clique em "Authorize" e pronto! üéâ
            
            ### ‚è∞ **Importante:**
            - O token expira em **5 minutos**
            - Renove quando necess√°rio fazendo novo login
            - Use sempre o prefixo `Bearer ` antes do token
            
            ---
            
            ## üë• **Usu√°rios de Demonstra√ß√£o**
            
            O sistema vem com usu√°rios pr√©-configurados para testes:
            
            | üë§ **Username** | üîë **Password** | üé≠ **Role** | üìã **Descri√ß√£o** |
            |-----------------|-----------------|-------------|-------------------|
            | `admin`         | `123`           | ADMIN       | Administrador do sistema |
            | `analista`      | `123`           | BASIC       | Analista de incidents |
            | `tecnico`       | `123`           | BASIC       | T√©cnico de suporte |
            | `suporte`       | `123`           | BASIC       | Atendimento ao cliente |
            
            ---
            
            ## **Recursos Principais**
            
            ### **Gest√£o de Incidents**
            -  **CRUD Completo**: Criar, listar, atualizar e deletar incidents
            -  **Filtros Avan√ßados**: Por status, prioridade e busca textual
            -  **Pagina√ß√£o Inteligente**: Controle total sobre resultados
            -  **Ordena√ß√£o Flex√≠vel**: Por qualquer campo, ASC ou DESC
            -  **Busca Combinada**: T√≠tulo e descri√ß√£o simultaneamente
            
            ### **Sistema de Coment√°rios**
            -  **Coment√°rios por Incident**: Hist√≥rico completo de intera√ß√µes
            -  **CRUD de Coment√°rios**: Gerenciamento total dos coment√°rios
            -  **Contadores**: Quantidade de coment√°rios por incident
            -  **Timestamps Autom√°ticos**: Controle de cria√ß√£o e atualiza√ß√£
            
            ### **Gerenciamento de Usu√°rios**
            -  **Registro P√∫blico**: Cria√ß√£o de conta sem autentica√ß√£o
            -  **Gest√£o de Roles**: Sistema de permiss√µes (ADMIN/BASIC)
            -  **Busca por Username**: Localiza√ß√£o r√°pida de usu√°rios
            -  **Seguran√ßa**: Senhas criptografadas com BCrypt
            
            ### **Estat√≠sticas e Relat√≥rios**
            -  **Dashboard de Stats**: Vis√£o geral do sistema
            -  **M√©tricas por Status**: Quantidades por cada status
            -  **M√©tricas por Prioridade**: Distribui√ß√£o de prioridades
            -  **Totalizadores**: Contadores gerais do sistema
            
            ---
            
            ## **Tecnologias Utilizadas**
            
            - **Spring Boot 3.5.5** - Framework principal
            - **Spring Security** - Autentica√ß√£o e autoriza√ß√£o
            - **JWT** - Tokens de acesso seguros
            - **PostgreSQL** - Banco de dados relacional
            - **Spring Data JPA** - Persist√™ncia de dados
            - **Flyway** - Migra√ß√£o de banco de dados
            - **SpringDoc OpenAPI 2.7.0** - Documenta√ß√£o autom√°tica
            
            ---
            
            ## **Exemplo Pr√°tico de Uso**
            
            ```bash
            # 1. Fazer login e obter token
            curl -X POST http://localhost:8080/api/login \\
              -H "Content-Type: application/json" \\
              -d '{"username":"admin","password":"123"}'
            
            # 2. Usar o token retornado para acessar endpoints protegidos
            curl -X GET http://localhost:8080/api/incidents \\
              -H "Authorization: Bearer SEU_TOKEN_AQUI"
            
            # 3. Criar um novo incident
            curl -X POST http://localhost:8080/api/incidents \\
              -H "Authorization: Bearer SEU_TOKEN_AQUI" \\
              -H "Content-Type: application/json" \\
              -d '{
                "title": "Servidor n√£o responde",
                "description": "Problema de conectividade",
                "priority": "HIGH",
                "status": "OPEN",
                "responsibleEmail": "admin@empresa.com",
                "tags": ["servidor", "urgente"]
              }'
            ```
            """;
    }
    

    private Contact buildContactInformation() {
        return new Contact()
            .name("Via Appia Inform√°tica - Equipe de Desenvolvimento")
            .email("contato@viaappia.com.br")
            .url("https://viaappia.com.br");
    }
    private License buildLicenseInformation() {
        return new License()
            .name("MIT License")
            .url("https://opensource.org/licenses/MIT");
    }
    
  
    private List<Server> buildServerList() {
        Server localServer = new Server()
            .url("http://localhost:8080")
            .description("üè† Servidor Local de Desenvolvimento");
        
        
        return List.of(localServer);
    }
    
    private Components buildSecurityComponents() {
        return new Components()
            .addSecuritySchemes("bearerAuth", buildJwtSecurityScheme());
    }

    private SecurityScheme buildJwtSecurityScheme() {
        return new SecurityScheme()
            .type(SecurityScheme.Type.HTTP)
            .scheme("bearer")
            .bearerFormat("JWT")
            .description("""
                üîê **Autentica√ß√£o JWT Bearer Token**
                
                Para autenticar suas requisi√ß√µes nesta API:
                
                1Ô∏è‚É£ **Obtenha um token**: Fa√ßa login via `POST /api/login`
                2Ô∏è‚É£ **Copie o token**: Do campo `accessToken` na resposta
                3Ô∏è‚É£ **Use o formato**: `Bearer {seu-token-jwt-aqui}`
                
                **üìã Exemplo de token:**
                ```
                Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoiYWRtaW4iLCJleHAiOjE3MDk1ODM2MzAsImlhdCI6MTcwOTU4MzMzMCwic2NvcGUiOiJBRE1JTiJ9...
                ```
                
                ‚ö†Ô∏è **Importante**: O token expira em 5 minutos. Renove conforme necess√°rio.
                
                ‚úÖ **Dica**: Ap√≥s colar o token aqui, ele ser√° automaticamente inclu√≠do em todas as requisi√ß√µes!
                """);
    }
    
    private SecurityRequirement buildGlobalSecurity() {
        return new SecurityRequirement().addList("bearerAuth");
    }
} 